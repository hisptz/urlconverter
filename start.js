/**
 * Created by Vincent P. Minde  on 3/2/16.
 */
//Sample command nodejs start -url http://localhost:8080/dhis2 -dhis http://localhost:8080/dhis2 -u kmbwilo -p DHIS2014 -o /tmp/output.pdf -mu mailname -mp password -mh localhost

/**
 * Currently used command
 *
 *  sudo nodejs start -url https://hmisportal.moh.go.tz/fpportal/nationalPDF.html -dhis https://hmisportal.moh.go.tz/training -group "Family Planning Report" -u vincentminde -p Ilovemymum1 -o /tmp/output.pdf -mh localhost
 *
 */



var dhisServer = "http://localhost:8080/dhis2",
    username = "", password = "", mailUser = "", mailPassword = "", mailHost = "localhost", userGroup = "";
//Evaluate arguments
for (var index = 0; index < process.argv.length; index++) {
    var commandArgument = process.argv[index];
    if (commandArgument == "-dhis") {
        dhisServer = process.argv[index + 1];
    } else if (commandArgument == "-u") {
        username = process.argv[index + 1];
    } else if (commandArgument == "-p") {
        password = process.argv[index + 1];
    } else if (commandArgument == "-mu") {
        mailUser = process.argv[index + 1];
    } else if (commandArgument == "-mp") {
        mailPassword = process.argv[index + 1];
    } else if (commandArgument == "-mh") {
        mailHost = process.argv[index + 1];
    } else if (commandArgument == "-group") {
        userGroup = process.argv[index + 1];
    }
}

var todaysDate = new Date();
var month = todaysDate.getMonth() + 1 - 2;
var year = todaysDate.getFullYear();
if (month < 1) {
    month = 12 + month;
    year--;
}
if (month == 1) {
    month = "January";
} else if (month == 2) {
    month = "February";
} else if (month == 3) {
    month = "March";
} else if (month == 4) {
    month = "April";
} else if (month == 5) {
    month = "May";
} else if (month == 6) {
    month = "June";
} else if (month == 7) {
    month = "July";
} else if (month == 8) {
    month = "August";
} else if (month == 9) {
    month = "September";
} else if (month == 10) {
    month = "October";
} else if (month == 11) {
    month = "November";
} else if (month == 12) {
    month = "December";
}

var Promise = require('promise');
function sendEmail(user, attachments) {
    //var Promise = require('promise');
    return new Promise(function (resolve, reject) {
        var postfixsever = require(__dirname + "/postfixsever");
        attachments.unshift({
            data: '' +
            '<html>Dear <b>' + user.name + '</b>,<br /><br />' +
            '    Find attached the monthly Family Planning summary report/s for December 2015.' +
            '   Please use Family Planning monthly report/s as a program and performance management tool, to help identify gaps in HR training and FP service delivery, for more targeted and efficient supportive supervision, program planning and resource allocation. You are reminded to pay attention to the action items listed in each report.' +
            '    <br /><br />For more information, refer to the following:' +
            '    <ul>' +
            '       <li><a href="https://hmisportal.moh.go.tz/hmisportal/#/familyPlanningHome">The Family Planning Dashboard</a></li>' +
            '       <li><a href="http://www.rchs.go.tz/traintracker/main.php">The TrainTracker HR training database</a></li>' +
            '   </ul>' +
                //You can view archived reports on the Family Planning Dashboard under the ‘Reports’ tab (add hyperlink if possible when ready)'+
            'Do not reply to this email. For further technical assistance or to provide feedback on the FP Dashboard, please <a href="https://hmisportal.moh.go.tz/hmisportal/#/feedback">follow this link</a>. <br />' +
            'If you need to verify information presented in the FP dashboard, please check with the HMIS focal person.' +
            '    <br /><br />If you are unable to view the attached PDF reports, you may wish to download a free PDF reader <a href="https://get.adobe.com/reader/">here</a>.<br />' +
            '    We hope you find this report useful.<br /><br />' +
            '    Kind regards,<br />' +
            '    Mr Clement Kihinga<br />' +
            'Reproductive and Child Health Section (RCHS)<br />' +
            'Ministry of Health, Community Development, Gender, Elderly and Children<br /><br /><span style="font-size: 10px;color: #555;">To stop receiving these emails please <a href="https://hmisportal.moh.go.tz/hmisportal/#/unsubscribe?uid=' + user.id + '">click here</a> to unsubscribe.</span>' +
            '</html>', alternative: true
        });
        postfixsever.postfixSend(
            {
                user: mailUser,
                password: mailPassword,
                host: mailHost,
                ssl: false,
                port: 25
            },
            {
                msg: "Reports Generated By DHIS 2",
                from: "fpportal@hisptanzania.org",
                to: user.name + " <" + user.email + ">",
                subject: "Family Planning Dashboard Report " + month + ' ' + year,
                attachment: attachments
            }, function (result) {
                if (result) {
                    console.log("Mail Error", result);
                    reject(result);
                } else {
                    //console.log("Email sent:",JSON.stringify(attachments));
                    resolve(result);
                }

            }
        );
    });
}

var organisationUnitsReports = {};
var pendingOrgUnits = [];
function generateReport(organisationUnit) {
    var url = "";
    if (organisationUnit.level == "1") {
        url = "https://hmisportal.moh.go.tz/hmisportal/nationalPDF.html";
    } else if (organisationUnit.level == "2") {
        url = "https://hmisportal.moh.go.tz/hmisportal/regionPDF.html#/home?uid=" + organisationUnit.id;
    } else if (organisationUnit.level == "3") {
        url = "https://hmisportal.moh.go.tz/hmisportal/districtPDF.html#/home?uid=" + organisationUnit.id;
    }
    return new Promise(function (resolve, reject) {
        if (url == "") {
            resolve();
            return;
        }
        var path = require('path');
        var childProcess = require('child_process');
        var phantomjs = require('phantomjs');
        var binPath = phantomjs.path;

        var date = new Date();
        var fileName = "report" + date.getFullYear() + "." + (date.getMonth() + 1) + "." + date.getDay() + "." + date.getHours() + "." + date.getMinutes() + "." + date.getSeconds() + "." + date.getMilliseconds() + ".png";
        var outputFile = "tmp/" + fileName;
        var childArgs = [
            path.join(__dirname, 'rasterize.js'),
            url,//'https://hmisportal.moh.go.tz/hmisportal/#/home',
            outputFile
        ];
        var postfixsever = require(__dirname + "/postfixsever");

        //Excecute phantomjs to convert url to
        childProcess.execFile(binPath, childArgs, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            } else {
                var PDFImagePack = require("pdf-image-pack")

                var imgs = [
                    //outputFile
                ];
                var fs = require("fs");
                fs.readdir("tmp", function(err,files){
                    if(err){
                        console.log("Error loading files.");
                        reject(err);
                    }else{
                        for(var i in files){
                            if(files[i].indexOf(fileName) > -1){
                                imgs.push("tmp/" + files[i]);
                            }
                        }
                        var output = outputFile + ".pdf";
                        var slide = new PDFImagePack();
                        slide.output(imgs, output, function(err, doc){
                            //attachments[organisationUnit.id] = {path: output, type: "image/png", name: organisationUnit.name + " Report.png"};
                            organisationUnitsReports[organisationUnit.id].report = {path: output, type: "application/pdf", name: organisationUnit.name + " " + month +" Report.pdf"};
                            var idIndex = pendingOrgUnits.indexOf(organisationUnit.id);
                            pendingOrgUnits.splice(idIndex,1);
                            resolve();
                        });
                    }
                })

                //Fetch the group of user to get the report

            }
        });
    });
}

function getUser(){
    var request = require('request'),
        url = dhisServer + "/api/userGroups.json?filter=name:eq:" + userGroup + "&fields=users[id,email,name,organisationUnits[id,name,level]]",
        auth = "Basic " + new Buffer(username + ":" + password).toString("base64");
    return new Promise(function (resolve, reject) {
        request(
            {
                url: url,
                headers: {
                    "Authorization": auth
                }
            },
            function (error, response, body) {
                if (error) {
                    reject(error);
                } else {
                    //Parse the body into json object
                    var json = JSON.parse(body);
                    resolve(json.userGroups[0].users);
                }

                // Do more stuff with 'body' here
            }
        );
    });
}
var interval;
var emailThreadCallback = function () {// Check every 2 minutes if a user's reports have been generated
    console.log("Checking for Emails");
    if(previousPendingReports ==  pendingOrgUnits.length && pendingOrgUnits.length != 0){
        var postfixsever = require(__dirname + "/postfixsever");
        for(var adminIndex in administrators){
            console.log("1");
            var attachments = [];
            attachments.unshift({
                data: '' +
                '<html>Dear <b>'+administrators[adminIndex].name+'</b>,<br /><br />' +
                '    The HMIS Server has failed to create PDF report. Please followup to ensure the server is running well.' +
                '</html>', alternative: true
            });
            console.log("2");
            postfixsever.postfixSend(
                {
                    user: mailUser,
                    password: mailPassword,
                    host: mailHost,
                    ssl: false,
                    port: 25
                },
                {
                    msg: "Report Generation Failure",
                    from: "fpportal@hisptanzania.org",
                    to: administrators[adminIndex].name + " <" + administrators[adminIndex].email + ">",
                    subject: "Family Planning Dashboard Report Error " + month + ' ' + year,
                    attachment: attachments
                }, function (result) {
                    if (result) {
                        console.log("Admin Mail Error", result);
                    } else {
                        console.log("Admin Email Sent");
                    }

                }
            );
            console.log("3");
        }
        console.log("4");
    }else{
        if(pendingOrgUnits.length == 0){
            console.log("All Organisation Unit Reports have been Generated.")
            clearInterval(interval);
        }
        previousPendingReports =  pendingOrgUnits.length;
        sendUserEmails();
    }
}
var batchProcessNumber = 3;
function generateReportsInBatch(organisationUnitIds){
    //var Promise = require('promise');
    var promises = [];
    console.log("Generating Reports for:");
    for(var orgUnitIndex in organisationUnitIds){
        console.log("\t" + organisationUnitsReports[organisationUnitIds[orgUnitIndex]].details.name);
        promises.push(generateReport(organisationUnitsReports[organisationUnitIds[orgUnitIndex]].details));
    }
    //console.log("Sending a batch requests.");
    return Promise.all(promises)
        .then(function (res) {
            console.log("Finished Generating Reports:",pendingOrgUnits.length," Reports Remaining");
            if(pendingOrgUnits.length != 0){
                generateReportsInBatch(pendingOrgUnits.slice(0,batchProcessNumber));
            }
        },function(err){
            console.log("Error in batch process.",err);
            generateReportsInBatch(pendingOrgUnits.slice(0,batchProcessNumber));
        });
}

var administrators = [{name:"Vincent P. Minde",email:"vincentminde@gmail.com"}]
var previousPendingReports = 0;
var dhisUsers = [];
/**
 * Send emails to users
 */
function sendUserEmails(){
    console.log("Start Sending Email");
    forLoop:
        for(var userIndex in dhisUsers){
            if(!dhisUsers[userIndex].emailSent){
                var attachments = [];
                for (var orgUnitIndex in dhisUsers[userIndex].organisationUnits) {
                    var orgUnit = dhisUsers[userIndex].organisationUnits[orgUnitIndex];
                    if(orgUnit.level == "1"  || orgUnit.level == "2" || orgUnit.level == "3"){
                        if(organisationUnitsReports[orgUnit.id].report){
                            attachments.push(organisationUnitsReports[orgUnit.id].report);
                        }else{
                            areAllEmailsSent = false;
                            console.log("\tBreaking sending an email to:" + dhisUsers[userIndex].name," Some reports not generated.",pendingOrgUnits.length);
                            continue forLoop;
                        }
                    }
                }
                console.log("\tSending Email To:" + dhisUsers[userIndex].name);
                sendEmail(dhisUsers[userIndex],attachments);
                dhisUsers[userIndex].emailSent = true;
            }else{

            }
        }
    console.log("Sending Email Done");
}

//fetchUsers();
//Get users of the group

getUser().then(function(users){
    dhisUsers = users;
    //Set the organisation Unit reports
    for(var userIndex in users){
        var user = users[userIndex];
        users[userIndex].emailSent = false;
        for (var orgUnitIndex in user.organisationUnits) {
            var orgUnit = user.organisationUnits[orgUnitIndex];
            if(orgUnit.level == "1"  || orgUnit.level == "2" || orgUnit.level == "3"){
                if(!organisationUnitsReports[orgUnit.id]){
                    pendingOrgUnits.push(orgUnit.id);
                }
                organisationUnitsReports[orgUnit.id] = {details:orgUnit};
            }
        }
    }
    previousPendingReports = pendingOrgUnits.length;
    //Generate reports in batches
    generateReportsInBatch(pendingOrgUnits.slice(0,batchProcessNumber));

    //Start an email thread which checks for users whose reports have been generated after every 15 minutes
    interval = setInterval(emailThreadCallback, 60000);
},function(){
    console.log("Error Fetching Users.")
})